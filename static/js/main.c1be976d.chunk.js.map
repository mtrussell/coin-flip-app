{"version":3,"sources":["bitcoin.jpg","ethereum.jpg","Coin.js","CoinContainer.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Coin","className","src","this","props","info","imgSrc","alt","sides","Component","CoinContainer","state","currCoin","nFlips","nHeads","nTails","handleClick","bind","arr","newCoin","Math","floor","random","length","setState","st","side","e","flipCoin","onClick","defaultProps","bitcoin","ethereum","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,8NCa5BC,E,uKARX,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKC,KAAKC,MAAMC,KAAKC,OAAQC,IAAKJ,KAAKC,MAAMC,KAAKG,a,GAJ5CC,a,gCCGbC,E,kDAOJ,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,SAAU,KACVC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARF,E,uDAYjB,ICzBYC,EDyBNC,GCzBMD,EDyBWf,KAAKC,MAAMI,OCxBlBY,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,SDyB/CpB,KAAKqB,UAAS,SAAAC,GACZ,MAAO,CACLb,SAAUO,EACVN,OAAQY,EAAGZ,OAAS,EACpBC,OAAQW,EAAGX,QAA2B,UAAjBK,EAAQO,KAAmB,EAAI,GACpDX,OAAQU,EAAGV,QAA2B,UAAjBI,EAAQO,KAAmB,EAAI,S,kCAK9CC,GACVxB,KAAKyB,a,+BAIL,OACE,6BACE,yDACCzB,KAAKQ,MAAMC,UAAY,kBAAC,EAAD,CAAMP,KAAMF,KAAKQ,MAAMC,WAC/C,4BAAQiB,QAAS1B,KAAKa,aAAtB,YACA,qCACUb,KAAKQ,MAAME,OADrB,2BAEmBV,KAAKQ,MAAMG,OAF9B,iBAGOX,KAAKQ,MAAMI,OAHlB,oB,GAxCoBN,aAAtBC,EACGoB,aAAe,CACpBtB,MAAO,CACL,CAACkB,KAAM,QAASpB,OAAO,GAAD,OAAKyB,MAC3B,CAACL,KAAM,QAASpB,OAAO,GAAD,OAAK0B,QA8ClBtB,QE5CAuB,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1be976d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bitcoin.74d5c9f8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ethereum.520a65ef.jpg\";","import React, { Component } from 'react';\r\nimport './Coin.css';\r\n\r\nclass Coin extends Component {\r\n  render() {\r\n    return(\r\n      <div className='Coin'>\r\n        <img src={this.props.info.imgSrc} alt={this.props.info.sides} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Coin;","import React, { Component } from 'react';\r\nimport { choice } from './helpers';\r\nimport Coin from './Coin';\r\nimport bitcoin from './bitcoin.jpg';\r\nimport ethereum from './ethereum.jpg';\r\n\r\nclass CoinContainer extends Component {\r\n  static defaultProps = {\r\n    sides: [\r\n      {side: 'heads', imgSrc: `${bitcoin}`},\r\n      {side: 'tails', imgSrc: `${ethereum}`}\r\n    ]\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currCoin: null,\r\n      nFlips: 0,\r\n      nHeads: 0,\r\n      nTails: 0\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  flipCoin() {\r\n    const newCoin = choice(this.props.sides);\r\n    this.setState(st => {\r\n      return {\r\n        currCoin: newCoin,\r\n        nFlips: st.nFlips + 1,\r\n        nHeads: st.nHeads + (newCoin.side === 'heads' ? 1 : 0),\r\n        nTails: st.nTails + (newCoin.side === 'tails' ? 1 : 0)\r\n      };\r\n    });\r\n  }\r\n\r\n  handleClick(e) {\r\n    this.flipCoin();\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <div>\r\n        <h2>Let's flip a crypto coin!</h2>\r\n        {this.state.currCoin && <Coin info={this.state.currCoin} />}\r\n        <button onClick={this.handleClick}>Flip Me!</button>\r\n        <p>\r\n          Out of {this.state.nFlips} flips, \r\n          there have been {this.state.nHeads} bitcoins \r\n          and {this.state.nTails} ethereums.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CoinContainer;","function choice(arr) {\r\n  let randomIndex = Math.floor(Math.random() * arr.length);\r\n  return arr[randomIndex];\r\n}\r\n\r\nexport { choice };","import React from 'react';\nimport './App.css';\nimport CoinContainer from './CoinContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoinContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}